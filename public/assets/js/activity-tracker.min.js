class ActivityTracker { constructor() { this.isActive = true; this.lastActivity = Date.now(); this.pingInterval = 5 * 60 * 1000; this.idleThreshold = 10 * 60 * 1000; this.init(); } init() { if (this.isDepartment('IT')) { this.startTracking(); this.bindEvents(); } } isDepartment(dept) { const userDept = document.body.dataset.userDepartment || ''; return userDept.includes(dept) || userDept.includes('Information') || userDept.includes('Technology'); } startTracking() { setInterval(() => { this.sendPing(); }, this.pingInterval); setInterval(() => { this.checkIdleState(); }, 30000); } bindEvents() { ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'].forEach(event => { document.addEventListener(event, () => { this.updateActivity(); }, true); }); document.addEventListener('visibilitychange', () => { if (document.hidden) { this.logActivity('break_start', 'User switched away from application'); } else { this.logActivity('break_end', 'User returned to application'); this.updateActivity(); } }); } updateActivity() { this.lastActivity = Date.now(); if (!this.isActive) { this.isActive = true; this.logActivity('break_end', 'User became active'); } } checkIdleState() { const now = Date.now(); const timeSinceLastActivity = now - this.lastActivity; if (timeSinceLastActivity > this.idleThreshold && this.isActive) { this.isActive = false; this.logActivity('break_start', 'User became idle'); } } sendPing() { if (this.isActive) { this.logActivity('system_ping', 'Active user ping'); } } logActivity(type, description) { fetch('/ergon/api/activity-log', { method: 'POST', headers: { 'Content-Type': 'application/json', }, body: JSON.stringify({ activity_type: type, description: description, is_active: this.isActive }) }).catch(err => { console.debug('Activity log failed:', err); }); } } document.addEventListener('DOMContentLoaded', () => { new ActivityTracker(); });