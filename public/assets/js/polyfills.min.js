if (!window.fetch) { window.fetch = function(url, options) { return new Promise(function(resolve, reject) { var xhr = new XMLHttpRequest(); var method = (options && options.method) || 'GET'; var headers = (options && options.headers) || {}; var body = (options && options.body) || null; xhr.open(method, url, true); for (var key in headers) { xhr.setRequestHeader(key, headers[key]); } xhr.onreadystatechange = function() { if (xhr.readyState === 4) { var response = { ok: xhr.status >= 200 && xhr.status < 300, status: xhr.status, statusText: xhr.statusText, json: function() { return Promise.resolve(JSON.parse(xhr.responseText)); }, text: function() { return Promise.resolve(xhr.responseText); } }; if (response.ok) { resolve(response); } else { reject(new Error('Network response was not ok')); } } }; xhr.onerror = function() { reject(new Error('Network error')); }; xhr.send(body); }); }; } if (!window.Promise) { window.Promise = function(executor) { var self = this; self.state = 'pending'; self.value = undefined; self.handlers = []; function resolve(result) { if (self.state === 'pending') { self.state = 'fulfilled'; self.value = result; self.handlers.forEach(handle); self.handlers = null; } } function reject(error) { if (self.state === 'pending') { self.state = 'rejected'; self.value = error; self.handlers.forEach(handle); self.handlers = null; } } function handle(handler) { if (self.state === 'pending') { self.handlers.push(handler); } else { if (self.state === 'fulfilled' && typeof handler.onFulfilled === 'function') { handler.onFulfilled(self.value); } if (self.state === 'rejected' && typeof handler.onRejected === 'function') { handler.onRejected(self.value); } } } this.then = function(onFulfilled, onRejected) { return new Promise(function(resolve, reject) { handle({ onFulfilled: function(result) { try { resolve(onFulfilled ? onFulfilled(result) : result); } catch (ex) { reject(ex); } }, onRejected: function(error) { try { resolve(onRejected ? onRejected(error) : error); } catch (ex) { reject(ex); } } }); }); }; executor(resolve, reject); }; Promise.resolve = function(value) { return new Promise(function(resolve) { resolve(value); }); }; Promise.reject = function(reason) { return new Promise(function(resolve, reject) { reject(reason); }); }; }